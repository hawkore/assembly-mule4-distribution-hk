<?xml version="1.0" encoding="UTF-8"?>
<!-- Ignite configuration with all defaults -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- AWS credentials. Provide your access key ID and secret access key. -->
	<bean id="aws.creds" class="com.amazonaws.auth.BasicAWSCredentials">
	  <constructor-arg value="${ignite.this.node.ipfinder.s3.accessKey}" />
	  <constructor-arg value="${ignite.this.node.ipfinder.s3.secretKey}" />
	</bean>
	
	<!-- AWS client configuracion. Network configuration, proxy, timeout.. etc. -->
	<bean id="aws.configuration" class="com.amazonaws.ClientConfiguration">

	</bean>
	
	<!-- local only  IP finder -->
    <bean name="localOnly" id="localOnly"
       class="com.hawkore.ignite.spi.discovery.tcp.ipfinder.test.IpFinder" lazy-init="true">
       <property name="shared" value="false" />     
       <property name="addresses">
        <list>
        	<value>localhost:45500..45503</value>
        </list>
       </property>
     </bean>

	<!-- Multicast  IP finder -->
	<bean name="MulticastIpFinder" id="MulticastIpFinder" class="org.apache.ignite.spi.discovery.tcp.ipfinder.multicast.TcpDiscoveryMulticastIpFinder" lazy-init="true">
          <property name="multicastGroup" value="${ignite.this.node.ipfinder.multicastGroup}"/>
	</bean>

	<!-- S3  IP finder -->
	<bean name="S3IpFinder" id="S3IpFinder" class="org.apache.ignite.spi.discovery.tcp.ipfinder.s3.TcpDiscoveryS3IpFinder" lazy-init="true">
	    <property name="awsCredentials" ref="aws.creds"/>
	    <property name="clientConfiguration" ref="aws.configuration"/>
	    <property name="bucketName" value="${ignite.this.node.ipfinder.s3.bucketName}"/>
	    <property name="withPathStyleAccess" value="${ignite.this.node.ipfinder.s3.withPathStyleAccess}"/>
	    <property name="endpoint" value="${ignite.this.node.ipfinder.s3.endpoint}"/>
    </bean>

	<!-- Auto ignite cluster activation when persistence is enabled - LifeCycleBean and TopologyValidator -->
	<bean name="autoClusterActivation" id="autoClusterActivation" class="com.hawkore.ignite.cache.AutoClusterActivation" lazy-init="true">
			<property name="delayForClusterActivation" value="${ignite.this.node.delayForClusterActivation}"/>
			<property name="autoRegisterNodeOnBaseTopologyWhenJoin" value="${ignite.this.node.autoRegisterNodeOnBaseTopologyWhenJoin}"/>
	</bean>

	<bean abstract="true" id="ignite.cfg" class="org.apache.ignite.configuration.IgniteConfiguration" >

		<property name="gridName" value="${ignite.this.node.gridname}"/>
		
		<property name="clientMode" value="${ignite.this.node.asclient:true}"/>
		
		<property name="workDirectory" value="${ignite.this.node.WorkDirectory:''}"/>

		<!-- on production peerClassLoadingEnabled is disallowed for performance reason -->
		<property name="peerClassLoadingEnabled" value="false" />
		
	    <!-- Configure internal thread pool. -->
	    <property name="publicThreadPoolSize" value="${ignite.this.node.publicThreadPoolSize}"/>
	    
	    <!-- Configure system thread pool. -->
	    <property name="systemThreadPoolSize" value="${ignite.this.node.systemThreadPoolSize}"/>
    	
    	<!-- Configure striped thread pool. -->
	    <property name="stripedPoolSize" value="${ignite.this.node.stripedPoolSize}"/>
    	
    	<!-- Configure rebalance thread pool. -->
	    <property name="rebalanceThreadPoolSize" value="${ignite.this.node.rebalanceThreadPoolSize}"/>
    	<!-- Only development... tipical on very stable low-latency network 500ms...-->	
    	<property name="failureDetectionTimeout" value="${ignite.this.node.failureDetectionTimeout}" />

		<!-- Segmentation Policy (invalid node), default STOP and 2 attempts-->
    	<property name="segmentationPolicy" value="${ignite.this.node.segmentationPolicy}" />
    	
    	<property name="segmentationResolveAttempts" value="${ignite.this.node.segmentationResolveAttempts}" />
		
		<property name="metricsLogFrequency" value="0"/>

	    <property name="gridLogger">
	        <bean class="org.apache.ignite.logger.log4j2.Log4J2Logger">
	            <constructor-arg type="java.lang.String" value="${ignite.this.node.config}/ignite-log4j2.xml"/>
	        </bean>
	    </property>
	    
	    <!-- add lifecycleBeans
	    - try to activate cluster on node start -->
	    <property name="lifecycleBeans">
	        <list>
	            <ref bean="autoClusterActivation"/>
	        </list>
	    </property>
	    
	    <!-- add default cache
	     - allows ignite-jdbc clients use it as cacheName on jdbc url: jdbc:ignite:cfg://cache=default:collocated=false:local=false@file:///...
	     - try to activate cluster on topology changes with a topologyValidator-->
	    <property name="cacheConfiguration">
   			<list>
				<bean class="org.apache.ignite.configuration.CacheConfiguration">
					<property name="name" value="default" />
					<property name="cacheMode" value="PARTITIONED" />
					<property name="indexedTypes">
						<array>
							<value>java.lang.String</value>
							<value>java.lang.Object</value>	
						</array>
					</property>								
				</bean>						
			</list>
	    </property>  	    
	    
		<!-- Add platform cache keys-->
		<property name="cacheKeyConfiguration">
			<list>	
				<bean class="org.apache.ignite.cache.CacheKeyConfiguration">
					<property name="typeName" value="com.hawkore.ignite.cache.affinity.AffinityKey" />
					<property name="affinityKeyFieldName" value="affKey" />
				</bean>				
				<bean class="org.apache.ignite.cache.CacheKeyConfiguration">
					<property name="typeName" value="org.apache.ignite.cache.affinity.AffinityKey" />
					<property name="affinityKeyFieldName" value="affKey" />
				</bean>
			</list>
		</property>	    

		<property name="binaryConfiguration">
		    <bean class="org.apache.ignite.configuration.BinaryConfiguration">
		        <property name="compactFooter" value="false"/>
		    </bean>
		</property>
	

		<!-- Add security communication layer-->
		<property name="sslContextFactory">
		  <bean class="org.apache.ignite.ssl.SslContextFactory">
		    <property name="keyStoreFilePath" value="${ignite.this.node.keystore.path}"/>
		    <property name="keyStorePassword" value="${ignite.this.node.keystore.pass}"/>
		    <property name="trustStoreFilePath" value="${ignite.this.node.truststore.path}"/>
		    <property name="trustStorePassword" value="${ignite.this.node.truststore.pass}"/>
		  </bean>
		</property>
		
	</bean>
</beans>
